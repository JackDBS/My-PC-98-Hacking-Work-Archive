(mes
 (meta (engine 'AI5) (charset "pc98") (dictbase 128))
 (dict)
 (define-proc 12
   (<>
    (set-arr~ @ 7 1)
    (if (== (: 2024) 0)
      (<>
       (set-var I T)
       (cond
        ((< I 530) (<> (set-var J 33280)))
        ((< I 630) (<> (set-var J 32768)))
        ((< I 1600) (<> (set-var J 33024)))
        ((< I 1730) (<> (set-var J 33536)))
        (else (<> (set-var J 33280))))
       (set-var I 0)
       (while
        (!= I 15)
        (<> (set-arr~ @ (+ 31 I) (~ J I)) (set-var I (+ I 1))))))))
 (define-proc 25
   (<>
    (set-arr~ @ 7 1)
    (set-var A (+ (~ Z 23) 1))
    (set-var X (~ A 0))
    (set-var Y (~ A 1))
    (set-var D (~b A 9))
    (set-var Y (- Y 1))
    (set-var D (+ 0 (&& (+ D 1) 1)))
    (if (< Y (+ (~ Z 14) (~ Z 10)))
      (<> (if (!= (~ Z 14) 0) (<> (set-arr~ Z 14 (- (~ Z 14) 1))))))
    (set-arr~ A 0 X)
    (set-arr~ A 1 Y)
    (set-arr~b A 9 D)
    (field 2)
    (field 3)
    (field 5)
    (delay W)
    (set-reg: 2011 1)))
 (define-proc 26
   (<>
    (set-arr~ @ 7 1)
    (set-var A (+ (~ Z 23) 1))
    (set-var X (~ A 0))
    (set-var Y (~ A 1))
    (set-var D (~b A 9))
    (set-var Y (+ Y 1))
    (set-var D (+ 2 (&& (+ D 1) 1)))
    (if (> Y (- (+ (~ Z 14) (~ Z 8)) (~ Z 12)))
      (<>
       (if (< (- (+ (~ Z 14) (~ Z 8)) 1) (~ Z 4))
         (<> (set-arr~ Z 14 (+ (~ Z 14) 1))))))
    (set-arr~ A 0 X)
    (set-arr~ A 1 Y)
    (set-arr~b A 9 D)
    (field 2)
    (field 3)
    (field 5)
    (delay W)
    (set-reg: 2011 1)))
 (define-proc 27
   (<>
    (set-arr~ @ 7 1)
    (set-var A (+ (~ Z 23) 1))
    (set-var X (~ A 0))
    (set-var Y (~ A 1))
    (set-var D (~b A 9))
    (set-var X (- X 1))
    (set-var D (+ 4 (&& (+ D 1) 1)))
    (if (< X (+ (~ Z 13) (~ Z 9)))
      (<> (if (!= (~ Z 13) 0) (<> (set-arr~ Z 13 (- (~ Z 13) 1))))))
    (set-arr~ A 0 X)
    (set-arr~ A 1 Y)
    (set-arr~b A 9 D)
    (field 2)
    (field 3)
    (field 5)
    (delay W)
    (set-reg: 2011 1)))
 (define-proc 28
   (<>
    (set-arr~ @ 7 1)
    (set-var A (+ (~ Z 23) 1))
    (set-var X (~ A 0))
    (set-var Y (~ A 1))
    (set-var D (~b A 9))
    (set-var X (+ X 1))
    (set-var D (+ 6 (&& (+ D 1) 1)))
    (if (> X (- (+ (~ Z 13) (~ Z 7)) (~ Z 11)))
      (<>
       (if (< (- (+ (~ Z 13) (~ Z 7)) 1) (~ Z 3))
         (<> (set-arr~ Z 13 (+ (~ Z 13) 1))))))
    (set-arr~ A 0 X)
    (set-arr~ A 1 Y)
    (set-arr~b A 9 D)
    (field 2)
    (field 3)
    (field 5)
    (delay W)
    (set-reg: 2011 1)))
 (define-proc 29
   (<>
    (set-arr~ @ 7 0)
    (set-var Z 0)
    (set-arr~ @ 5 Z)
    (set-arr~ @ 7 1)
    (set-arr~ Z 0 4096)
    (set-arr~ Z 5 4)
    (set-arr~ Z 6 0)
    (set-arr~ Z 7 32)
    (set-arr~ Z 8 18)
    (set-arr~ Z 9 4)
    (set-arr~ Z 10 4)
    (set-arr~ Z 11 4)
    (set-arr~ Z 12 4)))
 (define-proc 46
   (<>
    (set-arr~ @ 7 1)
    (set-var A (+ (~ Z 23) (* 0 16)))
    (set-arr~b A 5 X)
    (set-arr~b A 15 Y)
    (field 30 0)
    (if (== S 0)
      (<>
       (set-var A (~ Z 22))
       (set-var B (~ A 3))
       (set-arr~b B 0 209 255)
       (field 13 0 3)
       (set-var A (+ (~ Z 23) (* 0 16)))
       (while
        (// (!= (~b A 1) (~b A 5)) (!= (~b A 3) (~b A 15)))
        (<> (field 7) (field 2) (field 3) (field 4) (delay W)))
       (field 13 0 0)
       (set-reg: 2011 1)))))
 (define-proc 47
   (<>
    (set-arr~ @ 7 1)
    (if (== (: 2011) 1)
      (<>
       (set-var A (+ (~ Z 23) (* 0 16)))
       (set-arr~b A 5 0)
       (set-arr~b A 15 0)
       (field 30 0)
       (set-reg: 2011 0)))
    (field 13 0 0)
    (field 5)
    (while
     (== 1 1)
     (<>
      (mouse 0)
      (if-else (!= (: 1000) 0)
        (<> (set-reg: 10004 (- (: 1000) 1)) (field 13 0 5))
        (<> (field 13 0 0)))
      (set-arr~ @ 7 0)
      (delay W)
      (set-arr~ @ 7 1)
      (field 12)
      (if (== S 65534) (<> (mouse 1) (proc 24)))
      (if (!= S 65535) (<> (break)))))
    (mouse 1)
    (set-var V S)
    (proc 23)
    (set-var A (+ (~ Z 23) 1))
    (set-var X (~ A 0))
    (set-var Y (~ A 1))
    (set-var D (~b A 9))))
 (define-proc 49 (<> (blit 0 113 13 133 3 33 292 0) (set-reg: 2012 1)))
 (define-proc 24 (<> (set-var S 65535)))
 (set-reg: 2011 1)
 (define-proc 58
   (<>
    (set-arr~ @ 49 X)
    (set-arr~ @ 50 Y)
    (set-arr~ @ 51 (~ @ 7))
    (set-arr~ @ 7 0)
    (set-var X (~ @ 0))))
 (define-proc 59
   (<> (set-var X (~ @ 49)) (set-var Y (~ @ 50)) (set-arr~ @ 7 (~ @ 51))))
 (set-arr~ @ 48 (~ @ 7))
 (set-arr~ @ 7 3)
 (load "train_2.m" (~ @ 3))
 (set-arr~ @ 7 (~ @ 48))
 (proc 58)
 (set-var Y 499)
 (set-arr~ X Y 65535)
 (proc 59)
 (sound 2)
 (sound 0)
 (set-reg: 1908 1)
 (define-proc 12
   (<>
    (if (== (: 2024) 0)
      (<>
       (set-var I T)
       (cond
        ((< I 530) (<> (set-var J 33280)))
        ((< I 630) (<> (set-var J 32768)))
        ((< I 1600) (<> (set-var J 33024)))
        ((< I 1730) (<> (set-var J 33536)))
        (else (<> (set-var J 33280))))
       (set-var I 0)
       (while
        (!= I 15)
        (<> (set-arr~ @ (+ 31 I) (~ J I)) (set-var I (+ I 1))))))))
 (proc 29)
 (set-arr~ @ 7 3)
 (set-arr~ @ 6 2)
 (image "senro.gp4")
 (set-arr~ @ 6 0)
 (set-arr~ @ 7 1)
 (load "senro.map" (~ Z 0))
 (field 0)
 (load "senro.c5" (+ Z 40))
 (field 1)
 (set-arr~ @ 7 1)
 (field 14 0 1)
 (field 14 1 1)
 (field 14 2 1)
 (if-else (== D 0)
   (<> (field 14 3 0) (field 14 4 1) (field 10 0))
   (<> (field 14 3 1) (field 14 4 0) (field 10 1)))
 (proc 12)
 (util 2 0 1)
 (field 2)
 (field 3)
 (field 5)
 (util 2 1 0)
 (while (!= S 0) (<> (util 2 1 0)))
 (set-var I 0)
 (while (!= I 132) (<> (field 12) (delay W) (set-var I (+ I 1)))))